{
  "hash": "fe45b971d93391c8c6b2bf54f5bf0937",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A2: Case Study 2\"\nauthor: \"Tanya Michelle Justin\"\n---\n\n\n\n## Case Study 2- *Ikea Furniture*\n\nI've chosen the Ikea Furniture for my 2nd Case study. Here below is the basic setup for the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(ggridges)\n# devtools::install_github('cttobin/ggthemr')\nlibrary(ggthemr)\nlibrary(ggsci)\n```\n:::\n\n\n\nReading The File and glimpsing it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIkea<- read_delim(file=\"../../data/ikea.csv\",delim=\";\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3211 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (8): name, category, old_price, link, other_colors, short_description, d...\ndbl (5): item_id, depth, height, width, category_total\nnum (1): price\nlgl (1): sellable_online\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nIkea\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,211 × 15\n    item_id name     category price old_price sellable_online link  other_colors\n      <dbl> <chr>    <chr>    <dbl> <chr>     <lgl>           <chr> <chr>       \n 1 29123958 MINNEN   Beds (2…  3950 SR 445    TRUE            http… No          \n 2 49278341 BRIMNES  Beds (2…  8950 SR 925    TRUE            http… No          \n 3 50461230 SMÅGÖRA  Beds (2…  5950 No old p… TRUE            http… No          \n 4 89326463 PLATSA   Beds (2… 21110 SR 2,205  TRUE            http… No          \n 5 50468953 VATTVIK… Beds (2…  9950 No old p… TRUE            http… No          \n 6 69326609 SLÄKT    Beds (2…  5400 No old p… FALSE           http… No          \n 7 59099136 BRIMNES  Beds (2…  7950 No old p… TRUE            http… Yes         \n 8 40395245 NEIDEN   Beds (2…   990 No old p… TRUE            http… No          \n 9 69277307 LEIRVIK  Beds (2… 11950 No old p… TRUE            http… Yes         \n10 70395239 NEIDEN   Beds (2…  1990 No old p… TRUE            http… No          \n# ℹ 3,201 more rows\n# ℹ 7 more variables: short_description <chr>, designer <chr>, depth <dbl>,\n#   height <dbl>, width <dbl>, price_usd <chr>, category_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(Ikea)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,211\nColumns: 15\n$ item_id           <dbl> 29123958, 49278341, 50461230, 89326463, 50468953, 69…\n$ name              <chr> \"MINNEN\", \"BRIMNES\", \"SMÅGÖRA\", \"PLATSA\", \"VATTVIKEN…\n$ category          <chr> \"Beds (208)\", \"Beds (208)\", \"Beds (208)\", \"Beds (208…\n$ price             <dbl> 3950, 8950, 5950, 21110, 9950, 5400, 7950, 990, 1195…\n$ old_price         <chr> \"SR 445\", \"SR 925\", \"No old price\", \"SR 2,205\", \"No …\n$ sellable_online   <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRU…\n$ link              <chr> \"https://www.ikea.com/sa/en/p/minnen-ext-bed-frame-w…\n$ other_colors      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"Ye…\n$ short_description <chr> \"Ext bed frame with slatted bed base, 80x200 cm\", \"B…\n$ designer          <chr> \"IKEA of Sweden/Tina Christensen\", \"IKEA of Sweden/K…\n$ depth             <dbl> NA, 54, NA, 40, 83, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ height            <dbl> NA, 110, 79, 43, 86, NA, 111, NA, NA, NA, NA, NA, NA…\n$ width             <dbl> 85, 96, 66, 140, 92, 91, 146, 94, 188, 144, 154, 144…\n$ price_usd         <chr> \"106,650\", \"241,650\", \"160,650\", \"569,970\", \"268,650…\n$ category_total    <dbl> 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 20…\n```\n\n\n:::\n\n```{.r .cell-code}\ninspect(Ikea)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n               name     class levels    n missing\n1              name character    583 3211       0\n2          category character      9 3211       0\n3         old_price character    351 3211       0\n4   sellable_online   logical      2 3211       0\n5              link character   2765 3211       0\n6      other_colors character      2 3211       0\n7 short_description character   1566 3211       0\n8          designer character    374 3211       0\n9         price_usd character    969 3211       0\n                                   distribution\n1  BESTÅ (5.3%), PAX (3.5%) ...                \n2 Tables & desks (612) (19.1%) ...             \n3 No old price (82.1%), SR 1,385 (0.2%) ...    \n4 TRUE (99.5%), FALSE (0.5%)                   \n5  (%) ...                                     \n6 No (57.6%), Yes (42.4%)                      \n7 Chair (1.7%) ...                             \n8 IKEA of Sweden (23.2%) ...                   \n9 27,000 (1.5%), 6,750 (1.5%) ...              \n\nquantitative variables:  \n            name   class    min       Q1   median       Q3      max\n1        item_id numeric 102065 20403626 49289392 70403939 99932615\n2          price numeric     30     1855     5950    15960    95850\n3          depth numeric      1       37       47       66      257\n4         height numeric      1       70       83      140      700\n5          width numeric      1       60       81      150      420\n6 category_total numeric    190      236      481      548      612\n          mean           sd    n missing\n1 4.881130e+07 2.881559e+07 3211       0\n2 1.162364e+04 1.443910e+04 3211       0\n3 5.615829e+01 3.212208e+01 1870    1341\n4 1.048635e+02 6.392570e+01 2286     925\n5 1.103123e+02 7.386185e+01 2648     563\n6 4.224145e+02 1.523443e+02 3211       0\n```\n\n\n:::\n:::\n\n\n\n### Data Dictionary\n\n#### Qualitative Data:\n\n-   item_Id\n\n-   name\n\n-   category\n\n-   designer\n\n-   short_description\n\n-   other_colours\n\n-   link\n\n-   sellable_online\n\n#### Quantitative Data:\n\n-   price\n\n-   depth\n\n-   height\n\n-   width\n\n-   price_usd\n\n-   category_total\n\n-   old_price\n\n#### Target Variable:\n\nI think my target variable would be price and see what factors affect the variable price.\n\n#### Predictor Variables:\n\nMy predictor variables would be category, sellable_online, depth, height, width, designer, other_colours and old price.\n\n### How could have the experiment been conducted?\n\nA database of furniture would've been built by Ikea , including detailed attributes such as dimensions, colour, price, old price, previous prices, and designer names. Online availability and links to the product's online listing were probably recorded by searching up item Id. Previous prices (old_price) were probably in the database itself.\n\n#### **Other Hypotheses that can be made** :\n\n-   **H1**: Products designed by more well-known designers or those with unique attributes (e.g., more colors) are priced higher and sell better online.\n\n-   **H2**: Larger products (greater depth, width, and height) are priced higher due to material costs and complexity.\n\n-   **H3**: Products that have been discounted (old_price vs. price) experience increased online sales compared to full-priced items.\n\n### **Potential Research Questions (looking at the original graph)**\n\n-   How does the availability of multiple color options affect the price of IKEA items in different categories?\n\n-   What is the typical price range for different categories of IKEA products?\n\n-   Is there a correlation between product price and the availability of multiple color options?\n\n### Graph 1\n\nThis is the first graph that I tried out. I changed category into a factor and then proceeded to drop any values that aren't there in the data set. I then used gf_density to plot the graph. This gave me a faceted graph, therefor I looked at the density chapter on the website and discovered something called gf_density_ridges, so the next graph I tried to use that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIkea <- Ikea %>%\n  mutate(category = as.factor(category)) %>% \n    drop_na(price, category, other_colors)\n\n\n# Create a ridge plot using gf_density()\ngf_density(\n  ~ price | category, \n  data = Ikea, \n  fill = ~ other_colors,\n  color = ~ other_colors,\n  adjust = 1, \n  alpha = 0.6 \n) +\n  scale_x_log10() +  \n  labs(\n    title = \"How much do items in each IKEA category cost?\",\n    subtitle = \"Are they available in other colors?\",\n    x = \"Price (USD)\",\n    y = \"\"\n  ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Graph 2\n\nWhen I tried to use gf_density_ridges I came across a lot of errors regarding the aesthetics of y, which I honestly wasn't able to comprehend. With the help of AI-tools i came across something called geom_density_ridges and all my problems went away. I was getting closer to the graph. Now after looking at this graph I realised I had to change the X values to logs of 10.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nikea_data_clean <- Ikea %>%\n  mutate(price = as.numeric(price), \n         category = as.factor(category),\n         other_colors = as.factor(other_colors)) %>%  \n  drop_na(price, category, other_colors)\n\n\nggplot(ikea_data_clean, aes(x = price, y = category, fill = other_colors)) +\n  geom_density_ridges(alpha = 0.3, rel_min_height = 0.005) +\n  scale_x_continuous(limits = c(0, 10000)) +  \n  labs(\n    title = \"How much do items in each IKEA category cost?\",\n    subtitle = \"Are they available in other colors?\",\n    x = \"Price (USD)\",\n    y = \"Category\"\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 936\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1161 rows containing non-finite outside the scale range\n(`stat_density_ridges()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Graph 3\n\nI discovered something called breaks here to have the X axis values that I wanted but then it wasn't still spaced out so I tried the next graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ikea_data_clean, aes(x = price, y = category, fill = other_colors)) +\n  geom_density_ridges(alpha = 0.3, rel_min_height = 0.005) +\n  scale_x_continuous(\n    limits = c(0, 10000),          \n    breaks = c(1, 10, 100, 1000, 10000)  \n  ) +\n  labs(\n    title = \"How much do items in each IKEA category cost?\",\n    subtitle = \"Are they available in other colors?\",\n    x = \"Price (USD)\",\n    y = \"Category\"\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 936\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1161 rows containing non-finite outside the scale range\n(`stat_density_ridges()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Final Graph\n\nThis was the closest I could get to the final graph. Instead of using scale_x_continuous I used something called scale_x_log10 which helped me space out the values visually. One problem I had with this graph is that the values are skewed a little bit to the right side compared to the original graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ikea_data_clean, aes(x = price, y = category, fill = other_colors)) +\n  geom_density_ridges(alpha = 0.3, rel_min_height = 0.005) +\n  scale_x_log10(  \n    limits = c(1, 10000), \n    breaks = c(1, 10, 100, 1000, 10000)  \n  ) +\n  labs(\n    title = \"How much do items in each IKEA category cost?\",\n    subtitle = \"Are they available in other colors?\",\n    x = \"Price (USD)\",\n    y = \"Category\"\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.15\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1161 rows containing non-finite outside the scale range\n(`stat_density_ridges()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Inference\n\n-   A notable number of items provide options for other colors. Beds with additional color choices typically have a higher average price compared to those without.\n\n-   Certain categories, such as those with storage options, tend to be priced higher probably due to their added functionality and consumer demand.\n\n### My Story\n\nThis data set actually took me a lot of time to understand and visualize. I did learn a lot with this data set such as density plots and ridges and exploring their functionality. After finishing the first two case studies I realised that the geom function is a lot more easier to use after learning the syntax for it. It throws up a lot less errors and that is very nice :').\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}